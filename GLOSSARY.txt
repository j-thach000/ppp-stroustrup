# syntax
// - comment
    indicates the beginning of a comment in which statements after it are not read by the program
    comments are used to provide information to humans about the program

<< - insertion operator
    indicates the direction data is moving in 

std::cout - character output
    object that outputs data to console

#include - directive 
    before compilation there's the translation phase in which the .cpp file is scanned and the text is manipulated
    the #include directive replaces the directive with the content of ex: <iostream>

main() - main function
    the function called by the program that is the starting point to execute statements

std::cin - character input
    object from iostream that takes your keyboard input 

if (condition) statement
    a statement occurs if the condition is met

else statement
    explicitly happens as an alternative as an if statement fails

switch (value)
{
    case 'constant':
        body statement;
        break;
}
    a more optimized version of if statements if you're comparing a value
    against constants (integers or chars)

while (condition) statement 
    repeats the body statement as long as the condition is fulfilled

for (header) statement  
    an optimized syntax version of the while loop 
    the control variable, increment/decrement, and loop condition are neatly in the header
    used for when the amount of iterations is known 

for (type identifier : container) - range-for-statement
    syntax that has the specific use case of iterating through a container
    it expresses the math concept of a half-open sequence (beginning inclusive, ending exclusive)
    
push_back()
    inserts the argument into the container as the last element

size()
    returns the total amount of elements in the container

sort()
    for now I just know it organizes the container from smallest to largest elements

vector<type> identifier
    a container that has no fixed size 
    at creation it doesn't need its sized specified
    operations: sort, size, push_back, identifier[index]
    ideally should iterate through it with a range for loop

try
    a block of statements actively looking for thrown exceptions

throw
    signals an exception or error case has occurred
    in a try block
    execution immediately moves to a catch block that can handle the expcetion

catch
    a block of statements that handles exceptions for a single data type





------------------------------------------------------------------------------------------------------------------------

# concepts
C++
    a general purpose programming language that focuses on giving the programmer freedom (aka trust the programmer)
    also a large emphasis the ability to control memory management

comment 
    used to give information about the program to the reader
    describe "what" for groups of statements as a high level overview
    describe "why" for individual statements and "magic numbers"

compiler
    used to translate high level programming languages to machine language
    it detects syntax errors which violate the language's rules

compile-time error
    an error occurring at compilation when the syntax of the language is violated

executable
    the result of linking object files and the standard library together 
    it makes the computer hardware run a set of instructions

function    
    a named collection of statements that execute in sequential order

header
    *defining header file
    at the top of the program
    it's a file that acts as an interface between the separately compiled parts of the program (object files)
    it allows these object files to access declarations which are just named entities (objects, variables, functions, etc.)
    **the top of the for loop notation that includes the control variable and loop condition

IDE (integrated development environment)
    a gui program with a suite of tools including:
        - text editor
        - compiler
        - linker
        - syntax check
        - debugger

library
    a package of code made for reuse in other programs that provide a desired functionality

linker  
    a program that connects object code from the compilation process and library files
    it also checks for cross-file dependencies
    once those processes are done, it creates an executable which tells the hardware what to do

object code 
    machine code resulting from the compilation process in object files
    it hasn't be linked up yet to all other relevant object files

output  
    the result of the program's execution

program 
    a set of instructions for the hardware to execute

source code 
    the code written in a high level language before it is compiled
    it's a series of statements which act as instructions for the hardware

// ch 3 objects/types/values (how do we get, store and use data)
statement
    an instruction for the program to perform some action 
    *difference between the statement making the program do something and the program making the computer do something

assignment
    giving an object a value

concatenation
    putting together literals

literals
    values from the set of values that a data type uses

conversion
    changing a value that was associated with one data type to another type

declarations (not relevant yet as of ch04 10/5/22)    
    "this exists"
    the introduction of a name with its associated type into a scope
    A declaration is a definition unless it [...] is a class name declaration [...].
    https://stackoverflow.com/questions/1410563/what-is-the-difference-between-a-definition-and-a-declaration
    

decrement
    composite assignment operator 
    in this case it assigns the value of the variable - 1

definition (a kind of declaration statement)
    "this is what it is"
    specifies the entity to which the declared name refers to and its data type
    we establish the associated object with the declared name vs just introducing a name
    instantiate/implement an actual instance

increment
    composite assignment operator   
    assigns the value of the variable + 1

initialization (https://www.learncpp.com/cpp-tutorial/variable-assignment-and-initialization/)
    introducing a name to the scope, giving it a data type, and giving it a value at the same time
    basically define and assign at the same time for a variable 

name    
    an identifier for an entity

narrowing
    assigning a value from a data type with a larger range of values to a smaller data type

object
    a region of memory that could be holding data of some type
    
operation
    what can be done to a data type, ex: aritmetic operations

operator    
    the literal representation of the operations that can be done on a data type

type    
    a data type indicates what set of values and the operations that can be performed on that set of values

type safety
    considering whether or not there will be conversion and a loss of precision going from one data type to another

value   
    a piece of data with its associated type

variable    
    a named region of memory that can hold a value

// ch 4 computation (how do we get desired outputs from certain inputs)
abstraction 
    one of the techniques of problem solving (breaking problems down into pieces)
    an implementation that obscures unnecessary detail (ex: calling a library feature)

computation
    creating a program to get a certain output from certain inputs

conditional statement   
    determines what actions a computer takes depending on inputs and data so feature

divide and conquer
    one of the problem solving techniques
    breaking a problem down into smaller computations

expression 
    a statement comprised of operator and operands that produce a value

input
    data going into the computer 

output
    the result of actions we perform on inputs

iteration
    traversal over a data structure

loop
    repeating something over and over
    ex: while or for loops

lvalue
    the expression that appears on the left hand side of assignment statements
    an object that has an identifiable memory address

rvalue
    the expression that appears on the right side of an assignment statement
    data without any memory address, such as literals

member function
    function declared in the scope of a class (I just know them as library features currently)
    ex: size(), push_back( )

repetition
    doing something over and over
    while, for

selection
    statements that determine which statements occur

statement   
    an action that the program carries out

// ch 5 debugging (organizing programs to minimize errors)
compiler-time error
    composed of syntax and type errors
    first line of defense against errors in a program as the program is translated to machine code

syntax error
    program doesn't follow the rules of the programming language

type error  
    mismatching or concerns about the type of the data in the program

link-time error
    functions must be defined only once but can be declared many times

run-time error
    errors while the program executes

range error 
    trying to access an index beyond a container's range

argument error
    incorrect argument inputted into a function

logic error
    getting incorrect output after compiler-time to run-time errors 

assertion
    a statement that assumes something must be always true by that point in the program

invariant 
    something that must be true in the program by that point 

container 
    object that holds elements 
    ex: vector

debugging
    searching and removing errors in a program

exception
    a way to deal with errors
    mechanically separates the detection and handling of an error

pre-condition
    expectations of an argument for a function for it to work as expected

post-condition
    what is the output of the function

requirement
    description of the intended behavior of a program
    expectations/assumptions of arguments for a function

testing
    systematically searching for errors